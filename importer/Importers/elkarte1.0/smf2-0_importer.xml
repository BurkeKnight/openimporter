<?xml version="1.0"?>
<importer xmlns="http://www.elkarte.net/xml/importer" xmlns:smf="http://www.elkarte.net/">
	<general>
		<name>SMF 2.0</name>
		<version>ElkArte 1.0</version>
		<settings>/Settings.php</settings>
		<from_prefix>`$db_name`.$db_prefix</from_prefix>
		<table_test>{$from_prefix}members;</table_test>
		<defines>SMF=1</defines>
	</general>
	<steps1>
		<step>
			<title>Importing settings</title>
			<detect>{$from_prefix}settings</detect>
			<destination>{$to_prefix}settings</destination>
			<options>
				<replace>true</replace>
			</options>
			<code>
				$do_import = array(
					'news',
					'compactTopicPagesContiguous',
					'compactTopicPagesEnable',
					'enablePinnedTopics',
					'todayMod',
					'enablePreviousNext',
					'pollMode',
					'enableVBStyleLogin',
					'enableCompressedOutput',
					'attachmentSizeLimit',
					'attachmentPostLimit',
					'attachmentNumPerPostLimit',
					'attachmentDirSizeLimit',
					'attachmentExtensions',
					'attachmentCheckExtensions',
					'attachmentShowImages',
					'attachmentEnable',
					'attachmentEncryptFilenames',
					'attachmentThumbnails',
					'attachmentThumbWidth',
					'attachmentThumbHeight',
					'censorIgnoreCase',
					'mostOnline',
					'mostOnlineToday',
					'mostDate',
					'allow_disableAnnounce',
					'trackStats',
					'userLanguage',
					'titlesEnable',
					'topicSummaryPosts',
					'enableErrorLogging',
					'max_image_width',
					'max_image_height',
					'onlineEnable',
					'smtp_host',
					'smtp_port',
					'smtp_username',
					'smtp_password',
					'mail_type',
					'timeLoadPageEnable',
					'totalMembers',
					'totalTopics',
					'totalMessages',
					'simpleSearch',
					'censor_vulgar',
					'censor_proper',
					'enablePostHTML',
					'enableEmbeddedFlash',
					'xmlnews_enable',
					'xmlnews_maxlen',
					'hotTopicPosts',
					'hotTopicVeryPosts',
					'registration_method',
					'send_validation_onChange',
					'send_welcomeEmail',
					'allow_editDisplayName',
					'allow_hideOnline',
					'guest_hideContacts',
					'spamWaitTime',
					'pm_spam_settings',
					'reserveWord',
					'reserveCase',
					'reserveUser',
					'reserveName',
					'reserveNames',
					'autoLinkUrls',
					'banLastUpdated',
					'avatar_max_height_external',
					'avatar_max_width_external',
					'avatar_action_too_large',
					'avatar_max_height_upload',
					'avatar_max_width_upload',
					'avatar_resize_upload',
					'avatar_download_png',
					'failed_login_threshold',
					'oldTopicDays',
					'edit_wait_time',
					'edit_disable_time',
					'autoFixDatabase',
					'allow_guestAccess',
					'time_format',
					'number_format',
					'enableBBC',
					'max_messageLength',
					'signature_settings',
					'autoOptMaxOnline',
					'defaultMaxMessages',
					'defaultMaxTopics',
					'defaultMaxMembers',
					'enableParticipation',
					'recycle_enable',
					'recycle_board',
					'maxMsgID',
					'enableAllMessages',
					'fixLongWords',
					'who_enabled',
					'time_offset',
					'cookieTime',
					'lastActive',
					'requireAgreement',
					'unapprovedMembers',
					'package_make_backups',
					'databaseSession_enable',
					'databaseSession_loose',
					'databaseSession_lifetime',
					'search_cache_size',
					'search_results_per_page',
					'search_weight_frequency',
					'search_weight_age',
					'search_weight_length',
					'search_weight_subject',
					'search_weight_first_message',
					'search_max_results',
					'search_floodcontrol_time',
					'permission_enable_deny',
					'permission_enable_postgroups',
					'mail_next_send',
					'mail_recent',
					'settings_updated',
					'next_task_time',
					'warning_settings',
					'admin_features',
					'last_mod_report_action',
					'pruningOptions',
					'cache_enable',
					'reg_verification',
					'enable_buddylist',
					'birthday_email',
					'dont_repeat_theme_core',
					'dont_repeat_smileys_20',
					'globalCookies',
					'default_timezone',
					'memberlist_updated',
					'latestMember',
					'latestRealName',
					'db_mysql_group_by_fix',
					'rand_seed',
					'mostOnlineUpdated',
					'search_pointer',
					'spider_name_cache',
					'modlog_enabled',
					'disabledBBC',
					'latest_member',
					'latest_real_name',
					'total_members',
					'total_messages',
					'max_msg_id',
					'total_topics',
					'disable_hash_time',
					'latestreal_name',
					'disableHashTime',
					'paid_enabled',
					'paid_email',
					'paid_email_to',
					'paid_currency_code',
					'paid_currency_symbol',
					'paypal_email',
					'smiley_enable',
					'messageIcons_enable',
				);

				$request = $this->db->query("
					SELECT variable, value
					FROM {$from_prefix}settings;");

				while ($row = $this->db->fetch_assoc($request))
				{
					if (in_array($row['variable'], $do_import))
						$this->db->query("
							REPLACE INTO {$to_prefix}settings
								(variable, value)
							VALUES('$row[variable]', '$row[value]')");

					if ($row['variable'] == 'pretty_board_urls')
					{
						$pretty_urls = $row['value'];
						store_global('pretty_urls', $row['value']);
					}
				}

				$this->db->free_result($request);
			</code>
		</step>
		<step type="mandatory">
			<title>Importing members</title>
			<detect>{$from_prefix}members</detect>
			<destination>{$to_prefix}members</destination>
			<presql>TRUNCATE {$to_prefix}members;</presql>
			<query>
				SELECT
					id_member, member_name, date_registered, posts, id_group, lngfile, last_login,
					real_name, unread_messages, unread_messages, new_pm, buddy_list, pm_ignore_list,
					pm_prefs, mod_prefs, message_labels, passwd, email_address, personal_text,
					gender, birthdate, website_url, website_title, location, hide_email, show_online,
					time_format, signature, time_offset, avatar, pm_email_notify,
					usertitle, notify_announcements, notify_regularity, notify_send_body,
					notify_types, member_ip, member_ip2, secret_question, secret_answer, 1 AS id_theme, is_activated,
					validation_code, id_msg_last_visit, additional_groups, smiley_set, id_post_group,
					total_time_logged_in, password_salt, ignore_boards, IFNULL(warning, 0) AS warning, passwd_flood,
					pm_receive_from AS receive_from
				FROM {$from_prefix}members;
			</query>
		</step>
		<step>
			<title>Importing attachments</title>
			<detect>{$from_prefix}attachments</detect>
			<destination>{$to_prefix}attachments</destination>
			<presql>TRUNCATE {$to_prefix}attachments;</presql>
			<preparsecode>
				$request = $this->db->query("
					SELECT value
					FROM {$from_prefix}settings
					WHERE variable='attachmentUploadDir';");
				list ($smf_attachments_dir) = $this->db->fetch_row($request);

				$smf_attachments_dir =  rtrim($smf_attachments_dir, '/');

				if (empty($row['file_hash']))
				{
					$row['file_hash'] = createAttachmentFileHash($row['filename']);
					copy_file($smf_attachments_dir . '/' . $row['filename'], $attachmentUploadDir . '/' . $row['id_attach'] . '_' . $row['file_hash'] . '.elk');
				}
				else
					copy_file($smf_attachments_dir . '/' . $row['id_attach'] . '_' . $row['file_hash'], $attachmentUploadDir . '/'. $row['id_attach'] . '_' . $row['file_hash'] . '.elk');
			</preparsecode>
			<query>
				SELECT
					id_attach, id_thumb, id_msg, id_member, attachment_type, filename, file_hash, size, downloads,
					width, height, fileext, mime_type, id_folder
				FROM {$from_prefix}attachments
				WHERE id_msg != 0;
			</query>
		</step>
		<step>
			<title>Importing avatars</title>
			<detect>{$from_prefix}attachments</detect>
			<destination>{$to_prefix}attachments</destination>
			<preparsecode>
				// Try custom_avatar_dir first
				$request = $this->db->query("
					SELECT value
					FROM {$from_prefix}settings
					WHERE variable = 'custom_avatar_dir';");
				list ($smf_attachments_dir) = $this->db->fetch_row($request);

				if (empty($smf_attachments_dir))
				{
					$request = $this->db->query("
						SELECT value
						FROM {$from_prefix}settings
						WHERE variable='attachmentUploadDir';");
					list ($smf_attachments_dir) = $this->db->fetch_row($request);
				}

				if ($avatarUploadDir == $attachmentUploadDir)
					$row['attachment_type'] = 0;

				if (empty($row['file_hash']))
				{
					$row['file_hash'] = createAttachmentFileHash($row['filename']);
					copy_file($smf_attachments_dir . '/' . $row['filename'], $avatarUploadDir . '/' . $row['id_attach'] . '_' . $row['file_hash'] . '.elk');
				}
				else
					copy_file($smf_attachments_dir . '/' . $row['id_attach'] . '_' . $row['file_hash'], $avatarUploadDir . '/'. $row['id_attach'] . '_' . $row['file_hash'] . '.elk');
			</preparsecode>
			<query>
				SELECT
					id_attach, id_thumb, id_msg, id_member, attachment_type, filename, file_hash, size, downloads,
					width, height, fileext, mime_type, id_folder
				FROM {$from_prefix}attachments
				WHERE id_member != 0;
			</query>
		</step>
		<step>
			<title>Importing categories</title>
			<detect>{$from_prefix}categories</detect>
			<destination>{$to_prefix}categories</destination>
			<presql>TRUNCATE {$to_prefix}categories;</presql>
			<query>
				SELECT
					id_cat, name, cat_order, can_collapse
				FROM {$from_prefix}categories;
			</query>
		</step>
		<step>
			<title>Importing collapsed categories</title>
			<detect>{$from_prefix}collapsed_categories</detect>
			<destination>{$to_prefix}collapsed_categories</destination>
			<presql>TRUNCATE {$to_prefix}collapsed_categories;</presql>
			<query>
				SELECT
					id_cat, id_member
				FROM {$from_prefix}collapsed_categories;
			</query>
		</step>
		<step>
			<title>Importing boards</title>
			<detect>{$from_prefix}boards</detect>
			<destination>{$to_prefix}boards</destination>
			<presql>TRUNCATE {$to_prefix}boards;</presql>
			<query>
				SELECT
					id_board, id_cat, child_level, id_parent, board_order, id_last_msg, id_msg_updated, member_groups,
					id_profile, name, description, num_topics, num_posts, count_posts, id_theme,
					override_theme, unapproved_posts, unapproved_topics, redirect
				FROM {$from_prefix}boards;
			</query>
		</step>
		<step>
			<title>Importing topics</title>
			<detect>{$from_prefix}topics</detect>
			<destination>{$to_prefix}topics</destination>
			<presql>TRUNCATE {$to_prefix}topics;</presql>
			<query>
				SELECT
					id_topic, is_sticky, id_board, id_first_msg, id_last_msg, id_member_started,
					id_member_updated, id_poll,id_previous_board, id_previous_topic, num_replies,
					num_views, locked, unapproved_posts, approved
				FROM {$from_prefix}topics;
			</query>
		</step>
		<step>
			<title>Importing messages</title>
			<detect>{$from_prefix}messages</detect>
			<destination>{$to_prefix}messages</destination>
			<presql>TRUNCATE {$to_prefix}messages;</presql>
			<options>
				<limit>100</limit>
			</options>
			<query>
				SELECT
					id_msg, id_topic, id_board, poster_time, id_member, id_msg_modified, subject, poster_name,
					poster_email, poster_ip, smileys_enabled, modified_time, modified_name, body, icon, approved
				FROM {$from_prefix}messages;
			</query>
		</step>
		<step>
			<title>Importing polls</title>
			<detect>{$from_prefix}polls</detect>
			<destination>{$to_prefix}polls</destination>
			<presql>TRUNCATE {$to_prefix}polls;</presql>
			<query>
				SELECT
					id_poll, question, voting_locked, max_votes, expire_time, hide_results, change_vote,
					guest_vote, num_guest_voters, reset_poll, id_member, poster_name
				FROM {$from_prefix}polls;
			</query>
		</step>
		<step>
			<title>Importing poll choices</title>
			<detect>{$from_prefix}poll_choices</detect>
			<destination>{$to_prefix}poll_choices</destination>
			<presql>TRUNCATE {$to_prefix}poll_choices;</presql>
			<query>
				SELECT
					id_poll, id_choice, label, votes
				FROM {$from_prefix}poll_choices;
			</query>
		</step>
		<step>
			<title>Importing poll votes</title>
			<detect>{$from_prefix}log_polls</detect>
			<destination>{$to_prefix}log_polls</destination>
			<presql>TRUNCATE {$to_prefix}log_polls;</presql>
			<query>
				SELECT
					id_poll, id_member, id_choice
				FROM {$from_prefix}log_polls;
			</query>
		</step>
		<step>
			<title>Importing personal messages</title>
			<detect>{$from_prefix}personal_messages</detect>
			<destination>{$to_prefix}personal_messages</destination>
			<presql>TRUNCATE {$to_prefix}personal_messages;</presql>
			<options>
				<limit>200</limit>
			</options>
			<query>
				SELECT
					id_pm, id_pm_head, id_member_from, deleted_by_sender, from_name,
					msgtime, subject, body
				FROM {$from_prefix}personal_messages;
			</query>
		</step>
		<step>
			<title>Importing pm recipients</title>
			<detect>{$from_prefix}pm_recipients</detect>
			<destination>{$to_prefix}pm_recipients</destination>
			<presql>TRUNCATE {$to_prefix}pm_recipients;</presql>
			<query>
				SELECT
					id_pm, id_member, labels, bcc, is_read, is_new, deleted
				FROM {$from_prefix}pm_recipients;
			</query>
		</step>
		<step>
			<title>Importing pm rules</title>
			<detect>{$from_prefix}pm_rules</detect>
			<destination>{$to_prefix}pm_rules</destination>
			<presql>TRUNCATE {$to_prefix}pm_rules;</presql>
			<query>
				SELECT
					id_rule, id_member, rule_name, criteria, actions, delete_pm, is_or
				FROM {$from_prefix}pm_rules;
			</query>
		</step>
		<step>
			<title>Importing board moderators</title>
			<detect>{$from_prefix}moderators</detect>
			<destination>{$to_prefix}moderators</destination>
			<presql>TRUNCATE {$to_prefix}moderators;</presql>
			<query>
				SELECT
					id_board, id_member
				FROM {$from_prefix}moderators;
			</query>
		</step>
		<step>
			<title>Importing mark read data (boards)</title>
			<detect>{$from_prefix}log_boards</detect>
			<destination>{$to_prefix}log_boards</destination>
			<presql>TRUNCATE {$to_prefix}log_boards;</presql>
			<query>
				SELECT
					id_member, id_board, id_msg
				FROM {$from_prefix}log_boards;
			</query>
		</step>
		<step>
			<title>Importing mark read data (topics)</title>
			<detect>{$from_prefix}log_topics</detect>
			<destination>{$to_prefix}log_topics</destination>
			<presql>TRUNCATE {$to_prefix}log_topics;</presql>
			<query>
				SELECT
					id_member, id_topic, id_msg
				FROM {$from_prefix}log_topics;
			</query>
		</step>
		<step>
			<title>Importing mark read data</title>
			<detect>{$from_prefix}log_mark_read</detect>
			<destination>{$to_prefix}log_mark_read</destination>
			<presql>TRUNCATE {$to_prefix}log_mark_read;</presql>
			<query>
				SELECT
					id_member, id_board, id_msg
				FROM {$from_prefix}log_mark_read;
			</query>
		</step>
		<step>
			<title>Importing notifications</title>
			<detect>{$from_prefix}log_notify</detect>
			<destination>{$to_prefix}log_notify</destination>
			<presql>TRUNCATE {$to_prefix}log_notify;</presql>
			<query>
				SELECT
					id_member, id_topic, id_board, sent
				FROM {$from_prefix}log_notify;
			</query>
		</step>
		<step>
			<title>Importing membergroups</title>
			<detect>{$from_prefix}membergroups</detect>
			<destination>{$to_prefix}membergroups</destination>
			<options>
				<replace>true</replace>
			</options>
			<query>
				SELECT
					id_group, group_name, description, online_color, min_posts,
					max_messages, stars AS icons, group_type, hidden, id_parent
				FROM {$from_prefix}membergroups;
			</query>
		</step>
		<step>
			<title>Importing group moderators</title>
			<detect>{$from_prefix}group_moderators</detect>
			<destination>{$to_prefix}group_moderators</destination>
			<options>
				<replace>true</replace>
			</options>
			<query>
				SELECT
					id_group, id_member
				FROM {$from_prefix}group_moderators;
			</query>
		</step>
		<step>
			<title>Importing permission profiles</title>
			<detect>{$from_prefix}permission_profiles</detect>
			<destination>{$to_prefix}permission_profiles</destination>
			<options>
				<replace>true</replace>
			</options>
			<query>
				SELECT
					id_profile, profile_name
				FROM {$from_prefix}permission_profiles;
			</query>
		</step>
		<step>
			<title>Importing permissions</title>
			<detect>{$from_prefix}permissions</detect>
			<destination>{$to_prefix}permissions</destination>
			<options>
				<replace>true</replace>
			</options>
			<query>
				SELECT
					id_group, permission, add_deny
				FROM {$from_prefix}permissions;
			</query>
		</step>
		<step>
			<title>Importing board permissions</title>
			<detect>{$from_prefix}board_permissions</detect>
			<destination>{$to_prefix}board_permissions</destination>
			<options>
				<replace>true</replace>
			</options>
			<query>
				SELECT
					id_group, id_profile, permission, add_deny
				FROM {$from_prefix}board_permissions;
			</query>
		</step>
		<step>
			<title>Importing smileys</title>
			<detect>{$from_prefix}smileys</detect>
			<destination>{$to_prefix}smileys</destination>
			<options>
				<replace>true</replace>
			</options>
			<query>
				SELECT
					id_smiley, code, filename, description, smiley_row,
					smiley_order, hidden
				FROM {$from_prefix}smileys;
			</query>
		</step>
		<step>
			<title>Copying smileys</title>
			<detect>{$from_prefix}smileys</detect>
			<code>
				$request = $this->db->query("
					SELECT value
					FROM {$to_prefix}settings
					WHERE variable='smileys_dir';");
				list ($we_smileys_dir) = $this->db->fetch_row($request);

				$request = $this->db->query("
					SELECT value
					FROM {$from_prefix}settings
					WHERE variable='smileys_dir';");
				list ($smf_smileys_dir) = $this->db->fetch_row($request);

				copy_smileys($smf_smileys_dir, $we_smileys_dir);
			</code>
		</step>
		<step>
			<title>Importing statistics (activity log)</title>
			<detect>{$from_prefix}log_activity</detect>
			<destination>{$to_prefix}log_activity</destination>
			<presql>TRUNCATE {$to_prefix}log_activity;</presql>
			<query>
				SELECT
					date, hits, topics, posts, registers, most_on
				FROM {$from_prefix}log_activity;
			</query>
		</step>
		<step>
			<title>Importing logged actions</title>
			<detect>{$from_prefix}log_actions</detect>
			<destination>{$to_prefix}log_actions</destination>
			<presql>TRUNCATE {$to_prefix}log_actions;</presql>
			<query>
				SELECT
					id_action, id_log, log_time, id_member, ip, action, id_board,
					id_topic, id_msg, extra
				FROM {$from_prefix}log_actions;
			</query>
		</step>
		<step>
			<title>Importing reported posts</title>
			<detect>{$from_prefix}log_reported</detect>
			<destination>{$to_prefix}log_reported</destination>
			<presql>TRUNCATE {$to_prefix}log_reported;</presql>
			<query>
				SELECT
					id_report, id_msg, id_topic, id_board, id_member, membername, subject,
					body, time_started, time_updated, num_reports, closed, ignore_all
				FROM {$from_prefix}log_reported;
			</query>
		</step>
		<step>
			<title>Importing reported comments</title>
			<detect>{$from_prefix}log_reported_comments</detect>
			<destination>{$to_prefix}log_reported_comments</destination>
			<presql>TRUNCATE {$to_prefix}log_reported_comments;</presql>
			<query>
				SELECT
					id_comment, id_report, id_member, membername, comment, time_sent
				FROM {$from_prefix}log_reported_comments;
			</query>
		</step>
		<step>
			<title>Importing spider hits</title>
			<detect>{$from_prefix}log_spider_hits</detect>
			<destination>{$to_prefix}log_spider_hits</destination>
			<presql>TRUNCATE {$to_prefix}log_spider_hits;</presql>
			<query>
				SELECT
					id_hit, id_spider, log_time, url, processed
				FROM {$from_prefix}log_spider_hits;
			</query>
		</step>
		<step>
			<title>Importing spider stats</title>
			<detect>{$from_prefix}log_spider_stats</detect>
			<destination>{$to_prefix}log_spider_stats</destination>
			<presql>TRUNCATE {$to_prefix}log_spider_stats;</presql>
			<query>
				SELECT
					id_spider, page_hits, last_seen, stat_date
				FROM {$from_prefix}log_spider_stats;
			</query>
		</step>
		<step>
		<title>Importing subscriptions</title>
		<detect>{$from_prefix}subscriptions</detect>
		<destination>{$to_prefix}subscriptions</destination>
		<presql>TRUNCATE {$to_prefix}subscriptions;</presql>
		<query>
			SELECT
				id_subscribe, name, description, cost, length, id_group,
				add_groups, active, repeatable, allow_partial, reminder, email_complete
			FROM {$from_prefix}subscriptions;
		</query>
	</step>
	</steps1>
	<steps2>
		<step>
			<code>
			// Get all members with wrong number of personal messages.
			$request = $this->db->query("
				SELECT mem.id_member, COUNT(pmr.id_pm) AS real_num, mem.personal_messages
				FROM {$to_prefix}members AS mem
					LEFT JOIN {$to_prefix}pm_recipients AS pmr ON (mem.id_member = pmr.id_member AND pmr.deleted = 0)
				GROUP BY mem.id_member
				HAVING real_num != personal_messages");
			while ($row = $this->db->fetch_assoc($request))
			{
				$this->db->query("
					UPDATE {$to_prefix}members
					SET personal_messages = $row[real_num]
					WHERE id_member = $row[id_member]
					LIMIT 1");

				pastTime(0);
			}
			$this->db->free_result($request);

			$request = $this->db->query("
				SELECT mem.id_member, COUNT(pmr.id_pm) AS real_num, mem.unread_messages
				FROM {$to_prefix}members AS mem
					LEFT JOIN {$to_prefix}pm_recipients AS pmr ON (mem.id_member = pmr.id_member AND pmr.deleted = 0 AND pmr.is_read = 0)
				GROUP BY mem.id_member
				HAVING real_num != unread_messages");
			while ($row = $this->db->fetch_assoc($request))
			{
				$this->db->query("
					UPDATE {$to_prefix}members
					SET unread_messages = $row[real_num]
					WHERE id_member = $row[id_member]
					LIMIT 1");

				pastTime(0);
			}
			$this->db->free_result($request);
			</code>
		</step>
		<step>
			<code>
			$request = $this->db->query("
				SELECT id_board, MAX(id_msg) AS id_last_msg, MAX(modified_time) AS last_edited
				FROM {$to_prefix}messages
				GROUP BY id_board");
			$modifyData = array();
			$modifyMsg = array();
			while ($row = $this->db->fetch_assoc($request))
			{
				$this->db->query("
					UPDATE {$to_prefix}boards
					SET id_last_msg = $row[id_last_msg], id_msg_updated = $row[id_last_msg]
					WHERE id_board = $row[id_board]
					LIMIT 1");
				$modifyData[$row['id_board']] = array(
					'last_msg' => $row['id_last_msg'],
					'last_edited' => $row['last_edited'],
				);
				$modifyMsg[] = $row['id_last_msg'];
			}
			$this->db->free_result($request);

			// Are there any boards where the updated message is not the last?
			if (!empty($modifyMsg))
			{
				$request = $this->db->query("
					SELECT id_board, id_msg, modified_time, poster_time
					FROM {$to_prefix}messages
					WHERE id_msg IN (" . implode(',', $modifyMsg) . ")");
				while ($row = $this->db->fetch_assoc($request))
				{
					// Have we got a message modified before this was posted?
					if (max($row['modified_time'], $row['poster_time']) < $modifyData[$row['id_board']]['last_edited'])
					{
						// Work out the ID of the message (This seems long but it won't happen much.
						$request2 = $this->db->query("
							SELECT id_msg
							FROM {$to_prefix}messages
							WHERE modified_time = " . $modifyData[$row['id_board']]['last_edited'] . "
							LIMIT 1");
						if ($this->db->num_rows($request2) != 0)
						{
							list ($id_msg) = $this->db->fetch_row($request2);

							$this->db->query("
								UPDATE {$to_prefix}boards
								SET id_msg_updated = $id_msg
								WHERE id_board = $row[id_board]
								LIMIT 1");
						}
						$this->db->free_result($request2);
					}
				}
				$this->db->free_result($request);
			}
			</code>
		</step>
		<step>
			<code>
			$request = $this->db->query("
				SELECT id_group
				FROM {$to_prefix}membergroups
				WHERE min_posts = -1");
			$all_groups = array();
			while ($row = $this->db->fetch_assoc($request))
				$all_groups[] = $row['id_group'];
			$this->db->free_result($request);

			$request = $this->db->query("
				SELECT id_board, member_groups
				FROM {$to_prefix}boards
				WHERE FIND_IN_SET(0, member_groups)");
			while ($row = $this->db->fetch_assoc($request))
				$this->db->query("
					UPDATE {$to_prefix}boards
					SET member_groups = '" . implode(',', array_unique(array_merge($all_groups, explode(',', $row['member_groups'])))) . "'
					WHERE id_board = $row[id_board]
					LIMIT 1");
			$this->db->free_result($request);
			</code>
		</step>
		<step>
			<code>
			// Get the number of messages...
			$result = $this->db->query("
				SELECT COUNT(*) AS totalMessages, MAX(id_msg) AS maxMsgID
				FROM {$to_prefix}messages");
			$row = $this->db->fetch_assoc($result);
			$this->db->free_result($result);

			// Update the latest member. (Highest ID_MEMBER)
			$result = $this->db->query("
				SELECT id_member AS latestMember, real_name AS latestreal_name
				FROM {$to_prefix}members
				ORDER BY id_member DESC
				LIMIT 1");
			if ($this->db->num_rows($result))
				$row += $this->db->fetch_assoc($result);
			$this->db->free_result($result);

			// Update the member count.
			$result = $this->db->query("
				SELECT COUNT(*) AS totalMembers
				FROM {$to_prefix}members");
			$row += $this->db->fetch_assoc($result);
			$this->db->free_result($result);

			// Get the number of topics.
			$result = $this->db->query("
				SELECT COUNT(*) AS totalTopics
				FROM {$to_prefix}topics");
			$row += $this->db->fetch_assoc($result);
			$this->db->free_result($result);

			$this->db->query("
				REPLACE INTO {$to_prefix}settings
					(variable, value)
				VALUES ('latestMember', '$row[latestMember]'),
					('latestreal_name', '$row[latestreal_name]'),
					('totalMembers', '$row[totalMembers]'),
					('totalMessages', '$row[totalMessages]'),
					('maxMsgID', '$row[maxMsgID]'),
					('totalTopics', '$row[totalTopics]'),
					('disableHashTime', " . (time() + 7776000) . ")");
			</code>
		</step>
		<step>
			<code>
			$request = $this->db->query("
				SELECT id_group, min_posts
				FROM {$to_prefix}membergroups
				WHERE min_posts != -1
				ORDER BY min_posts DESC");
			$post_groups = array();
			while ($row = $this->db->fetch_assoc($request))
				$post_groups[$row['min_posts']] = $row['id_group'];
			$this->db->free_result($request);

			$request = $this->db->query("
				SELECT id_member, posts
				FROM {$to_prefix}members");
			$mg_updates = array();
			while ($row = $this->db->fetch_assoc($request))
			{
				$group = 4;
				foreach ($post_groups as $min_posts => $group_id)
					if ($row['posts'] >= $min_posts)
					{
						$group = $group_id;
						break;
					}

				$mg_updates[$group][] = $row['id_member'];
			}
			$this->db->free_result($request);

			foreach ($mg_updates as $group_to => $update_members)
				$this->db->query("
					UPDATE {$to_prefix}members
					SET id_post_group = $group_to
					WHERE id_member IN (" . implode(', ', $update_members) . ")
					LIMIT " . count($update_members));
			</code>
		</step>
		<step>
			<code>
			// Needs to be done separately for each board.
			$result_boards = $this->db->query("
				SELECT id_board
				FROM {$to_prefix}boards");
			$boards = array();
			while ($row_boards = $this->db->fetch_assoc($result_boards))
				$boards[] = $row_boards['id_board'];
			$this->db->free_result($result_boards);

			foreach ($boards as $id_board)
			{
				// Get the number of topics, and iterate through them.
				$result_topics = $this->db->query("
					SELECT COUNT(*)
					FROM {$to_prefix}topics
					WHERE id_board = $id_board");
				list ($num_topics) = $this->db->fetch_row($result_topics);
				$this->db->free_result($result_topics);

				// Find how many messages are in the board.
				$result_posts = $this->db->query("
					SELECT COUNT(*)
					FROM {$to_prefix}messages
					WHERE id_board = $id_board");
				list ($num_posts) = $this->db->fetch_row($result_posts);
				$this->db->free_result($result_posts);

				// Fix the board's totals.
				$this->db->query("
					UPDATE {$to_prefix}boards
					SET num_topics = $num_topics, num_posts = $num_posts
					WHERE id_board = $id_board
					LIMIT 1");
			}
			</code>
		</step>
		<step>
			<code>
			while (true)
			{
				$resultTopic = $this->db->query("
					SELECT t.id_topic, COUNT(m.id_msg) AS num_msg
					FROM {$to_prefix}topics AS t
						LEFT JOIN {$to_prefix}messages AS m ON (m.id_topic = t.id_topic)
					GROUP BY t.id_topic
					HAVING num_msg = 0
					LIMIT $_REQUEST[start], 200");

				$numRows = $this->db->num_rows($resultTopic);

				if ($numRows > 0)
				{
					$stupidTopics = array();
					while ($topicArray = $this->db->fetch_assoc($resultTopic))
						$stupidTopics[] = $topicArray['id_topic'];
					$this->db->query("
						DELETE FROM {$to_prefix}topics
						WHERE id_topic IN (" . implode(',', $stupidTopics) . ')
						LIMIT ' . count($stupidTopics));
					$this->db->query("
						DELETE FROM {$to_prefix}log_topics
						WHERE id_topic IN (" . implode(',', $stupidTopics) . ')');
				}
				$this->db->free_result($resultTopic);

				if ($numRows < 200)
					break;

				// @todo this should not deal with $_REQUEST and alike
				$_REQUEST['start'] += 200;
				pastTime(6);
			}
			</code>
		</step>
		<step>
			<code>
			while (true)
			{
				$resultTopic = $this->db->query("
					SELECT
						t.id_topic, MIN(m.id_msg) AS myid_first_msg, t.id_first_msg,
						MAX(m.id_msg) AS myid_last_msg, t.id_last_msg, COUNT(m.id_msg) - 1 AS my_num_replies,
						t.num_replies
					FROM {$to_prefix}topics AS t
						LEFT JOIN {$to_prefix}messages AS m ON (m.id_topic = t.id_topic)
					GROUP BY t.id_topic
					HAVING id_first_msg != myid_first_msg OR id_last_msg != myid_last_msg OR num_replies != my_num_replies
					LIMIT $_REQUEST[start], 200");

				$numRows = $this->db->num_rows($resultTopic);

				while ($topicArray = $this->db->fetch_assoc($resultTopic))
				{
					$memberStartedID = $his->getMsgMemberID($topicArray['myid_first_msg']);
					$memberUpdatedID = $his->getMsgMemberID($topicArray['myid_last_msg']);

					$this->db->query("
						UPDATE {$to_prefix}topics
						SET id_first_msg = '$topicArray[myid_first_msg]',
							id_member_started = '$memberStartedID', id_last_msg = '$topicArray[myid_last_msg]',
							id_member_updated = '$memberUpdatedID', num_replies = '$topicArray[my_num_replies]'
						WHERE id_topic = $topicArray[id_topic]
						LIMIT 1");
				}
				$this->db->free_result($resultTopic);

				if ($numRows < 200)
					break;

				// @todo this should not deal with $_REQUEST and alike
				$_REQUEST['start'] += 100;
				pastTime(7);
			}
			</code>
		</step>
		<step>
			<code>
			// First, let's get an array of boards and parents.
			$request = $this->db->query("
				SELECT id_board, id_parent, id_cat
				FROM {$to_prefix}boards");
			$child_map = array();
			$cat_map = array();
			while ($row = $this->db->fetch_assoc($request))
			{
				$child_map[$row['id_parent']][] = $row['id_board'];
				$cat_map[$row['id_board']] = $row['id_cat'];
			}
			$this->db->free_result($request);

			// Let's look for any boards with obviously invalid parents...
			foreach ($child_map as $parent => $dummy)
			{
				if ($parent != 0 && !isset($cat_map[$parent]))
				{
					// Perhaps it was supposed to be their id_cat?
					foreach ($dummy as $board)
					{
						if (empty($cat_map[$board]))
							$cat_map[$board] = $parent;
					}

					$child_map[0] = array_merge(isset($child_map[0]) ? $child_map[0] : array(), $dummy);
					unset($child_map[$parent]);
				}
			}

			// The above id_parents and id_cats may all be wrong; we know id_parent = 0 is right.
			$solid_parents = array(array(0, 0));
			$fixed_boards = array();
			while (!empty($solid_parents))
			{
				list ($parent, $level) = array_pop($solid_parents);
				if (!isset($child_map[$parent]))
					continue;

				// Fix all of this board's children.
				foreach ($child_map[$parent] as $board)
				{
					if ($parent != 0)
						$cat_map[$board] = $cat_map[$parent];
					$fixed_boards[$board] = array($parent, $cat_map[$board], $level);
					$solid_parents[] = array($board, $level + 1);
				}
			}

			foreach ($fixed_boards as $board => $fix)
			{
				$this->db->query("
					UPDATE {$to_prefix}boards
					SET id_parent = " . (int) $fix[0] . ", id_cat = " . (int) $fix[1] . ", child_level = " . (int) $fix[2] . "
					WHERE id_board = " . (int) $board . "
					LIMIT 1");
			}

			// Leftovers should be brought to the root. They had weird parents we couldn't find.
			if (count($fixed_boards) < count($cat_map))
			{
				$this->db->query("
					UPDATE {$to_prefix}boards
					SET child_level = 0, id_parent = 0" . (empty($fixed_boards) ? '' : "
					WHERE id_board NOT IN (" . implode(', ', array_keys($fixed_boards)) . ")"));
			}

			// Last check: any boards not in a good category?
			$request = $this->db->query("
				SELECT id_cat
				FROM {$to_prefix}categories");
			$real_cats = array();
			while ($row = $this->db->fetch_assoc($request))
				$real_cats[] = $row['id_cat'];
			$this->db->free_result($request);

			$fix_cats = array();
			foreach ($cat_map as $board => $cat)
			{
				if (!in_array($cat, $real_cats))
					$fix_cats[] = $cat;
			}

			if (!empty($fix_cats))
			{
				$this->db->query("
					INSERT INTO {$to_prefix}categories
						(name)
					VALUES ('General Category')");
				$catch_cat = mysqli_insert_id($this->db->con);

				$this->db->query("
					UPDATE {$to_prefix}boards
					SET id_cat = " . (int) $catch_cat . "
					WHERE id_cat IN (" . implode(', ', array_unique($fix_cats)) . ")");
			}
			</code>
		</step>
		<step>
			<code>
			$request = $this->db->query("
				SELECT c.id_cat, c.cat_order, b.id_board, b.board_order
				FROM {$to_prefix}categories AS c
					LEFT JOIN {$to_prefix}boards AS b ON (b.id_cat = c.id_cat)
				ORDER BY c.cat_order, b.child_level, b.board_order, b.id_board");
			$cat_order = -1;
			$board_order = -1;
			$curCat = -1;
			while ($row = $this->db->fetch_assoc($request))
			{
				if ($curCat != $row['id_cat'])
				{
					$curCat = $row['id_cat'];
					if (++$cat_order != $row['cat_order'])
						$this->db->query("
							UPDATE {$to_prefix}categories
							SET cat_order = $cat_order
							WHERE id_cat = $row[id_cat]
							LIMIT 1");
				}
				if (!empty($row['id_board']) && ++$board_order != $row['board_order'])
					$this->db->query("
						UPDATE {$to_prefix}boards
						SET board_order = $board_order
						WHERE id_board = $row[id_board]
						LIMIT 1");
			}
			$this->db->free_result($request);
			</code>
		</step>
		<step>
			<code>
			$this->db->query("
				ALTER TABLE {$to_prefix}boards
				ORDER BY board_order");

			$this->db->query("
				ALTER TABLE {$to_prefix}smileys
				ORDER BY code DESC");
			</code>
		</step>
		<step>
			<code>
			$request = $this->db->query("
				SELECT COUNT(*)
				FROM {$to_prefix}attachments");
			list ($attachments) = $this->db->fetch_row($request);
			$this->db->free_result($request);

			while ($_REQUEST['start'] < $attachments)
			{
				$request = $this->db->query("
					SELECT id_attach, filename, attachment_type
					FROM {$to_prefix}attachments
					WHERE id_thumb = 0
						AND (RIGHT(filename, 4) IN ('.gif', '.jpg', '.png', '.bmp') OR RIGHT(filename, 5) = '.jpeg')
						AND width = 0
						AND height = 0
					LIMIT $_REQUEST[start], 500");
				if ($this->db->num_rows($request) == 0)
					break;
				while ($row = $this->db->fetch_assoc($request))
				{
					if ($row['attachment_type'] == 1)
					{
						$request2 = $this->db->query("
							SELECT value
							FROM {$to_prefix}settings
							WHERE variable = 'custom_avatar_dir'
							LIMIT 1");
						list ($custom_avatar_dir) = $this->db->fetch_row($request2);
						$this->db->free_result($request2);

						$filename = $custom_avatar_dir . '/' . $row['filename'];
					}
					else
						$filename = $this->getLegacyAttachmentFilename($row['filename'], $row['id_attach']);

					// Probably not one of the imported ones, then?
					if (!file_exists($filename))
						continue;

					$size = @getimagesize($filename);
					$filesize = @filesize($filename);
					if (!empty($size) && !empty($size[0]) && !empty($size[1]) && !empty($filesize))
						$this->db->query("
							UPDATE {$to_prefix}attachments
							SET
								size = " . (int) $filesize . ",
								width = " . (int) $size[0] . ",
								height = " . (int) $size[1] . "
							WHERE id_attach = $row[id_attach]
							LIMIT 1");
				}
				$this->db->free_result($request);

				// More?
				// We can't keep importing the same files over and over again!
				$_REQUEST['start'] += 500;
				pastTime(11);
			}
			</code>
		</step>
	</steps2>
</importer>